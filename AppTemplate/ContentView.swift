
import SwiftUI

struct ContentView: View {
    @EnvironmentObject var ðŸ“±: ðŸ“±AppModel
    @EnvironmentObject var ðŸ›’: ðŸ›’StoreModel
    @State private var ðŸš©ShowADMenuSheet: Bool = false
    var body: some View {
        if #available(iOS 16.0, *) {
            NavigationSplitView {
                ðŸ„»istView()
            } detail: {
                Image(systemName: "questionmark")
                    .font(.largeTitle)
                    .foregroundStyle(.tertiary)
            }
        } else {
            NavigationView { ðŸ„»istView() }
                .navigationViewStyle(.stack)
        }
        //.overlay(alignment: .bottom) { ðŸ“£ADPopupBanner() }
    }
    func ðŸ„»istView() -> some View {
        List {
            ðŸ“£ADBanner($ðŸš©ShowADMenuSheet)
            
            ðŸ”—OpenSystemSetting()
            
            ðŸ›’PurchaseView()
            
            Section {
                HStack {
                    Text("displayName")
                    Spacer()
                    Text(ðŸ›’.ðŸŽ«Name)
                        .foregroundStyle(.secondary)
                }
                
                NavigationLink("ðŸŽ«Product.debugDescription") {
                    Text(ðŸ›’.ðŸŽ«Product.debugDescription)
                        .padding()
                        .minimumScaleFactor(0.1)
                        .navigationTitle("ðŸŽ«Product.debugDescription")
                        .navigationBarTitleDisplayMode(.inline)
                }
            } header: { Text("In-App Purchase Product") }
            
            Section { ðŸ–¨printLog() }
            
            ðŸ” BiggerSystemFontTest()
        }
        .listStyle(.plain)
        .navigationTitle("ContentView")
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                ðŸ› MenuButton()
            }
        }
        .modifier(ðŸ“£ADMenuSheet($ðŸš©ShowADMenuSheet))
    }
}


struct ï¹€DismissButton: View {
    var ï¹€Dismiss: DismissAction? = nil
    @Binding var ðŸš©ShowSheet: Bool
    var body: some View {
        Button {
            if let ï¹€Dismiss {
                ï¹€Dismiss.callAsFunction()
            } else {
                ðŸš©ShowSheet = false
            }
            UISelectionFeedbackGenerator().selectionChanged()
        } label: {
            Image(systemName: "chevron.down")
        }
        .tint(.secondary)
        .accessibilityLabel("Dismiss")
    }
    init(_ ï¹€Dismiss: DismissAction) {
        self.ï¹€Dismiss = ï¹€Dismiss
        self._ðŸš©ShowSheet = .constant(false)
    }
    init(_ ðŸš©ShowSheet: Binding<Bool>) {
        self._ðŸš©ShowSheet = ðŸš©ShowSheet
    }
}




struct ContentView_Previews: PreviewProvider {
    static let ðŸ“± = ðŸ“±AppModel()
    static let ðŸ›’ = ðŸ›’StoreModel(id: "PLACEHOLDER.adfree")
    
    static var previews: some View {
        ContentView()
            .environmentObject(ðŸ“±)
            .environmentObject(ðŸ›’)
            .previewLayout(.fixed(width: 300, height: 600))
    }
}
